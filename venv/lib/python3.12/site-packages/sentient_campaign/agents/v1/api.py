
from abc import ABC
from typing import _ProtocolMeta, Any, Dict, Protocol, final, runtime_checkable

from .message import ActivityMessage, ActivityResponse


class FinalMethodError(Exception):
    pass


class ProtectedMethodMeta(_ProtocolMeta):
    def __new__(cls, name, bases, dct):
        protected_methods = {'name', 'description', 'sentient_llm_config'}
        if name != 'AgentBase':
            for method_name in protected_methods:
                if method_name in dct and any(method_name in base.__dict__ for base in bases):
                    raise TypeError(f"Cannot override method: {method_name}")
        return super().__new__(cls, name, bases, dct)
    
@runtime_checkable
class INotify(Protocol):

    async def async_notify(self, message: ActivityMessage):
        """
        Asynchronously notify the agent whenever there is a message.

        Args:
            message (ActivityMessage): The activity message to notify the agent about.
        """
        ...


@runtime_checkable
class IRespond(Protocol):

    async def async_respond(self, message: ActivityMessage) -> ActivityResponse:
        """
            Asynchronously respond to a given activity message.

            Args:
                message (ActivityMessage): The activity message to respond to.

            Returns:
                ActivityResponse: The response to the activity message.
        """
        ...


@runtime_checkable
class IAgent(Protocol):


    @property
    def name(self) -> str:
        """
        This function returns the name of the agent.

        Returns:
            str: The name of the agent.
        """
        ...

    
    @property
    def description(self) -> str:
        """
           This function returns the description of the agent.
        """
        ...

    
    @property
    def sentient_llm_config(self) -> str:
        """
        This function returns the llm configuration of the agent.
        """
        ...


class AgentBase(IAgent,Protocol, metaclass=ProtectedMethodMeta):
    def _agent_initialize(self, name: str, description: str, sentient_llm_config: Dict[str, Any]) -> None:
        self._name = name
        self._description = description
        self._sentient_llm_config = sentient_llm_config

    def test_set_sentient_llm_config(self, sentient_llm_config: Dict[str, Any]) -> None:
        self._sentient_llm_config = sentient_llm_config

    @final
    @property
    def name(self) -> str:
        return self._name

    @final
    @property
    def description(self) -> str:
        return self._description

    @final
    @property
    def sentient_llm_config(self) -> Dict[str, Any]:
        return self._sentient_llm_config


@runtime_checkable
class IListenerAgent(IAgent, INotify, Protocol):
    """
    This class represents an agent that listens for messages.
    """
    ...


@runtime_checkable
class IReactiveAgent(AgentBase, INotify, IRespond, Protocol):
    """
    This class represents an agent that can listen and react to messages

    You can extend this class to create a new agent. All the child classes of IReactiveAgent has access to attribute sentient_llm_config which is a dictionary containing the llm configuratio.
    The sentient_llm_config dictionary contains the following keys:
               - config_list: A list of dictionaries containing the configuration for the llms . Each dictionary contains the following keys:  
                     - llm_model_name: The name of the model
                     - llm_base_url: The base url of the model
                     - api_key: The api key for the model

    example:
    sentient_llm_config = {
        "config_list": [
            {
                "llm_model_name": "meta-70b",
                "llm_base_url": "https://sentient-llm_host-1.com",
                "api_key": "xxxxxxx"
            },
            {
                "llm_model_name": "meta-70b",
                "llm_base_url": "https://sentient-llm_host-2.com",
                "api_key": "xxxxxxx"
            }
        ]

    }

    """
    ...

    def __initialize__(self, name: str, description: str, config: dict = None):
        """
        This function initializes the agent.

        Args:
            name (str): The name of the agent.
            description (str): The description of the agent.
            config (dict, optional): The configuration of the agent. Defaults to None.
           .
        """
        ...

    async def async_notify(self, message: ActivityMessage):
        """
        Asynchronously notify the agent whenever there is a message.

        Args:
            message (ActivityMessage): The activity message to notify the agent about.
        """
        ...

    async def async_respond(self, message: ActivityMessage) -> ActivityResponse:
        """
            Asynchronously respond to a given activity message.

            Args:
                message (ActivityMessage): The activity message to respond to.

            Returns:
                ActivityResponse: The response to the activity message.
        """
        ...
