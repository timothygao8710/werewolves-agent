"""
This module defines classes for handling activity messages with various content types,
including text, audio, and video. It uses Pydantic for data validation and serialization.

Classes:
    MimeType (Enum): Defines common MIME types for text, audio, and video content.
    TextContent (BaseModel): Represents text content in a message.
    AudioContent (BaseModel): Placeholder for audio content.
    VideoContent (BaseModel): Placeholder for video content.
    MessageChannelType (Enum): Defines types of message channels.
    ActivityMessageHeader (BaseModel): Represents the header information for an activity message.
    ActivityMessage (BaseModel): Represents a complete activity message, including header and content.
    ActivityResponse (BaseModel): Represents a response to an activity message.

Example usage:
    # Creating and using TextContent
    content = TextContent(text="Hello, world!")


    # Creating and using ActivityMessageHeader
    header = ActivityMessageHeader(
        message_id="123",
        sender="Alice",
        channel="general",
        channel_type=MessageChannelType.GROUP,
        target_receivers=["Bob", "Charlie"]
    )
  
    # Creating and using ActivityMessage
    message = ActivityMessage(
        content_type=MimeType.TEXT_PLAIN,
        header=header,
        content=content
    )
  

    # Creating and using ActivityResponse
    response = ActivityResponse("Hello, world!")
  
"""

from enum import Enum
import json
from pydantic import BaseModel, field_validator, validator
from typing import List, Optional, Union


class MimeType(Enum):
    """
    Enum for common audio, video, and text MIME types.

    Attributes:
        TEXT_PLAIN (str): Plain text MIME type.
        TEXT_HTML (str): HTML MIME type.
        TEXT_CSS (str): CSS MIME type.
        TEXT_JAVASCRIPT (str): JavaScript MIME type.
        AUDIO_MPEG (str): MP3 audio MIME type.
        AUDIO_WAV (str): WAV audio MIME type.
        AUDIO_OGG (str): OGG audio MIME type.
        AUDIO_FLAC (str): FLAC audio MIME type.
        VIDEO_MP4 (str): MP4 video MIME type.
        VIDEO_WEBM (str): WebM video MIME type.
        VIDEO_OGG (str): OGG video MIME type.
        VIDEO_QUICKTIME (str): QuickTime video MIME type.

    Example:
        mime_type = MimeType.TEXT_PLAIN
        assert mime_type.value == "text/plain"
    """

    TEXT_PLAIN = "text/plain"
    TEXT_HTML = "text/html"
    TEXT_CSS = "text/css"
    TEXT_JAVASCRIPT = "text/javascript"
    AUDIO_MPEG = "audio/mpeg"
    AUDIO_WAV = "audio/wav"
    AUDIO_OGG = "audio/ogg"
    AUDIO_FLAC = "audio/flac"
    VIDEO_MP4 = "video/mp4"
    VIDEO_WEBM = "video/webm"
    VIDEO_OGG = "video/ogg"
    VIDEO_QUICKTIME = "video/quicktime"


class TextContent(BaseModel):
    """
    Represents text content in a message.

    Attributes:
        text (str): The text content of the message.

    Methods:
        to_dict(): Returns a dictionary representation of the content.

    Example:
        content = TextContent(text="Hello, world!")

    """

    text: str

    def to_dict(self):
        """
        Convert the TextContent to a dictionary.

        Returns:
            dict: A dictionary containing the text content.

        Example:
            content = TextContent(text="Hello, world!")

        """
        return {"text": self.text}


class AudioContent(BaseModel):
    """
    Placeholder for audio content. Currently empty.
    """

    pass


class VideoContent(BaseModel):
    """
    Placeholder for video content. Currently empty.
    """

    pass


class MessageChannelType(Enum):
    """
    Defines types of message channels.

    Attributes:
        DIRECT (str): Represents a direct message channel.
        GROUP (str): Represents a group message channel.

    Example:
        channel_type = MessageChannelType.GROUP

    """

    DIRECT = "direct"
    GROUP = "group"


class ActivityMessageHeader(BaseModel):
    """
    Represents the header information for an activity message.

    Attributes:
        message_id (str): Unique identifier for the message.
        sender (str): The sender of the message.
        channel (str): The channel through which the message is sent.
        channel_type (MessageChannelType): The type of the channel (direct or group).
        target_receivers (Optional[List[str]]): List of target receivers, if applicable.

    Methods:
        to_dict(): Returns a dictionary representation of the header.
        to_json(): Returns a JSON string representation of the header.

    Example:
        header = ActivityMessageHeader(
            message_id="123",
            sender="Alice",
            channel="general",
            channel_type=MessageChannelType.GROUP,
            target_receivers=["Bob", "Charlie"]
        )

    """

    message_id: str
    sender: str
    channel: str
    channel_type: MessageChannelType
    target_receivers: Optional[List[str]] = None

    def to_dict(self):
        """
        Convert the ActivityMessageHeader to a dictionary.

        Returns:
            dict: A dictionary representation of the header.

        Example:
            header = ActivityMessageHeader(
                message_id="123",
                sender="Alice",
                channel="general",
                channel_type=MessageChannelType.GROUP,
                target_receivers=["Bob", "Charlie"]
            )

        """
        return {
            "message_id": self.message_id,
            "sender": self.sender,
            "channel": self.channel,
            "channel_type": self.channel_type.value,
            "target_receivers": self.target_receivers,
        }

    def to_json(self):
        """
        Convert the ActivityMessageHeader to a JSON string.

        Returns:
            str: A JSON string representation of the header.

        Example:
            header = ActivityMessageHeader(
                message_id="123",
                sender="Alice",
                channel="general",
                channel_type=MessageChannelType.GROUP,
                target_receivers=["Bob", "Charlie"]
            )
            json_str = header.to_json()
        """
        return json.dumps(self.to_dict())


class ActivityMessage(BaseModel):
    """
    Represents a complete activity message, including header and content.

    Attributes:
        content_type (MimeType): The MIME type of the message content.
        header (ActivityMessageHeader): The header information for the message.
        content (Union[TextContent, AudioContent, VideoContent]): The content of the message.

    Methods:
        to_dict(): Returns a dictionary representation of the message.
        to_json(): Returns a JSON string representation of the message.

    Example:
        header = ActivityMessageHeader(
            message_id="123",
            sender="Alice",
            channel="general",
            channel_type=MessageChannelType.GROUP,
            target_receivers=["Bob", "Charlie"]
        )
        content = TextContent(text="Hi Alice!")
        message = ActivityMessage(
            content_type=MimeType.TEXT_PLAIN,
            header=header,
            content=content
        )
    """

    content_type: MimeType
    header: ActivityMessageHeader
    content: Union[TextContent, AudioContent, VideoContent]

    def to_dict(self):
        """
        Convert the ActivityMessage to a dictionary.

        Returns:
            dict: A dictionary representation of the message.

        Example:
            header = ActivityMessageHeader(...)
            content = TextContent(text="Hi Alice!")
            message = ActivityMessage(
                content_type=MimeType.TEXT_PLAIN,
                header=header,
                content=content
            )
        """
        return {
            "content_type": self.content_type.value,
            "header": self.header.to_dict(),
            "content": self.content.to_dict(),
        }

    def to_json(self):
        """
        Convert the ActivityMessage to a JSON string.

        Returns:
            str: A JSON string representation of the message.

        Example:
            message = ActivityMessage(...)
            json_str = message.to_json()

        """
        return json.dumps(self.to_dict())


class ActivityResponse(BaseModel):
    """
    Represents a response to an activity message.

    Attributes:
        response_type (MimeType): The MIME type of the response content (default: MimeType.TEXT_PLAIN).
        response (Union[TextContent, AudioContent, VideoContent]): The content of the response.

    Methods:
        validate_response(): Validator that converts string responses to TextContent.
        to_dict(): Returns a dictionary representation of the response.
        to_json(): Returns a JSON string representation of the response.

    Example:
        response = ActivityResponse("Hello, world!")

    """

    response_type: MimeType = MimeType.TEXT_PLAIN
    response: Union[TextContent, AudioContent, VideoContent]

    @field_validator("response", mode="before")
    def _validate_response(cls, v):
        if isinstance(v, str):
            return TextContent(text=v)
        elif isinstance(v, (TextContent, AudioContent, VideoContent)):
            return v
        else:
            raise ValueError("Response must be a string or a content object.")

    def __init__(self, response=None, **data):
        """
        Initialize the ActivityResponse.

        Args:
            response: The response content.
            **data: Additional data for initialization.

        Example:
            response1 = ActivityResponse("Hello, world!")
            response2 = ActivityResponse(TextContent(text="Hello, world!"))
        """
        if isinstance(response, str):
            super().__init__(response=TextContent(text=response), **data)
        else:
            super().__init__(response=response, **data)

    def to_dict(self):
        """
        Convert the ActivityResponse to a dictionary.

        Returns:
            dict: A dictionary representation of the response.

        Example:
            response = ActivityResponse("Hello, world!")
            assert response.to_dict() == {
                "response_type": "text/plain",
                "response": {"text": "Hello, world!"}
            }
        """
        return {
            "response_type": self.response_type.value,
            "response": self.response.to_dict(),
        }

    def to_json(self):
        """
        Convert the ActivityResponse to a JSON string.

        Returns:
            str: A JSON string representation of the response.

        Example:
            response = ActivityResponse("Hello, world!")
            json_str = response.to_json()
            assert json.loads(json_str) == response.to_dict()
        """
        return json.dumps(self.to_dict())
