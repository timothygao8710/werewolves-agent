
import base64
import logging
import os
import random
import docker
from docker.models.containers import Container




logger = logging.getLogger("activity_runner_utils")
log_level = logging.INFO
if os.environ.get("SENTIENT_ENABLE_RUNNER_DEBUG_LOGS", "false") == "true":
    log_level = logging.DEBUG


def add_console_log_handler(logger: logging.Logger,level=logging.INFO):
    logger.setLevel(level)
    logger.propagate = True
    handler = logging.StreamHandler()
    handler.setLevel(level)
    formatter = logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s')
    handler.setFormatter(formatter)
    logger.addHandler(handler)
    return logger


logger = add_console_log_handler(logger, level=log_level)


def get_container_ip(container: Container, network_name: str) -> str:
    """
    Get the IP address of a container on a specific network.
    
    Args:
    container (Container): The Docker container object
    network_name (str): The name of the Docker network
    
    Returns:
    str: The IP address of the container, or None if not found
    """
    container.reload()  # Refresh container data
    networks = container.attrs['NetworkSettings']['Networks']
    if network_name in networks:
        return networks[network_name]['IPAddress']
    else:
        return None

def get_available_port( start_range=11000, end_range=12000):
    def is_port_available( port):
        import socket

        with socket.socket(socket.AF_INET, socket.SOCK_STREAM) as s:
            return s.connect_ex(("localhost", port)) != 0
    while True:
        port = random.randint(start_range, end_range)
        if is_port_available(port):
            return port



def remove_dead_containers(docker_client:docker.DockerClient):
    # Initialize Docker client
    

    # List all containers, including stopped ones
    containers = docker_client.containers.list(all=True)

    # Filter only exited (dead) containers
    dead_containers = [container for container in containers if container.status == 'exited']

    if not dead_containers:
        logger.info("No dead containers found.")
        return

    # Remove all dead containers
    for container in dead_containers:
        try:
            logger.info(f"Removing container {container.short_id} ({container.name})...")
            container.remove(force=True)  # Use 'force' to ensure removal
            logger.info(f"Container {container.short_id} removed successfully.")
        except docker.errors.APIError as e:
            logger.error(f"Failed to remove container {container.short_id}: {str(e)}")



